--- 
# TinyTapeout project information
project:
  wokwi_id:    0        # If using wokwi, set this to your project's ID

# If using an HDL, set wokwi_id as 0 and uncomment and list your source files here. 
# Source files must be in ./src and you must list each source file separately
  source_files:
    - mult4x4.v
    - mult_control.v
    - mux2.v
    - mult2x2.v
    - shifter.v
    - adder.v
    - counter.v
    - reg8.v
  top_module:  "mult4x4"      # put the name of your top module here, make it unique by prepending your github username

# How many tiles your design occupies? A single tile is about 167x108 uM.
# Before changing this, please reach out to us on discord to discuss your design.
  tiles: "1x1"    # Valid values: 1x1, 1x2, 2x2, 4x2 or 8x2

# Keep a track of the submission yaml
yaml_version: 4

# As everyone will have access to all designs, try to make it easy for someone new to your design to know what
# it does and how to operate it. This info will be automatically collected and used to make a datasheet for the chip.
#
# Here is a great example: https://github.com/davidsiaw/tt02-davidsiaw-stackcalc/blob/38c5647f83aad2aec675d566aa3d67b98f0aac81/info.yaml
documentation: 
  author:       "Tek"
  title:        "4x4 mult"
  language:     "Verilog"
  description:  "a sequential 4 x 4 multiplier"

# Longer description of how the project works. You can use standard markdown format.
  how_it_works: |
This 4 x 4 bit multiplier requires four clock cycles to perform the full multiplication. An FSM controls the entire operation
(mult_control.v)
During each cycle, a pair of 2-bit portion of the multiplicands is multiplied by a 2 x 2 multiplier (mult2x2.v).
The multiplication result of these 2-bit slices is then accumulated (mux2.v, shifter.v, adder.v, counter.v).
At the end of the four cycles (during the 5th cycle), the fully composed 8-bit product can be read at the output (reg8.v).

# Instructions on how someone could test your project, include things like what buttons do what and how to set the clock if needed
  how_to_test:  |
See the test.py file in the src directory

# A description of what the inputs do (e.g. red button, SPI CLK, SPI MOSI, etc).
  inputs:               
    - dataa[3:3]
    - dataa[2:2]
    - dataa[1:1]
    - dataa[0:0]
    - datab[3:3]
    - datab[2:2]
    - datab[1:1]
    - datab[0:0]
# A description of what the outputs do (e.g. status LED, SPI MISO, etc)
  outputs:
    - product4x4_out[7:7]
    - product4x4_out[6:6]
    - product4x4_out[5:5]
    - product4x4_out[4:4]
    - product4x4_out[3:3]
    - product4x4_out[2:2]
    - product4x4_out[1:1]
    - product4x4_out[0:0]
# A description of what the bidirectional I/O pins do (e.g. I2C SDA, I2C SCL, etc)
  bidirectional:
    - done_flag
    - none
    - none
    - none
    - none
    - none
    - none
    - start

# The following fields are optional
  tag:          "test, multiplier"      # comma separated list of tags: test, encryption, experiment, clock, animation, utility, industrial, pwm, fpga, alu, microprocessor, risc, riscv, sensor, signal generator, fft, filter, music, bcd, sound, serial, timer, random number generator, calculator, decoder, counter, puzzle, multiplier, game, oscillator,
  external_hw:  ""      # Describe any external hardware needed
  discord:      ""      # Your discord handle, used for communication and automatically assigning tapeout role after a submission
  doc_link:     ""      # URL to longer form documentation, eg the README.md in your repository
  clock_hz:     10000000       # Clock frequency in Hz (if required)
  picture:      ""      # relative path to a picture in your repository
